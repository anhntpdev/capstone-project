
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3  
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@1.3.0

jobs:
    check-dockerfile-format:
        docker:
            # Use the same Docker base as the project 
            - image: python:3.7.3-stretch

        working_directory: ~/repo

        steps:
            - checkout
            - run:
                name: install dependencies
                command: |
                    python3 -m venv venv
                    . venv/bin/activate
                    make install
            # run lint!
            - run:
                name: run lint
                command: |
                    . venv/bin/activate
                    make lint 

    build-docker-image:
        docker:
            # Use the same Docker base as the project 
            - image: docker:17.05.0-ce-git
        
        working_directory: ~/capstoneRepo

        steps:
            - checkout
            
            - setup_remote_docker:
                version: 20.10.14
                docker_layer_caching: true

            # run lint!
            - run:
                name: Build docker container
                command: |
                    docker build -t anhntp/capstone-app-new-version .
                    docker images

    upload-docker:
        docker:
          - image: docker:17.05.0-ce-git
    
        working_directory: ~/capstoneRepo
        steps:
          - checkout
    
          - setup_remote_docker:
                version: 20.10.14
                docker_layer_caching: true   
          - run:
              name: Upload Docker to Dockerhub
              command: |
                dockerpath=anhntp/capstone-app-new-version
                docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
                echo "Docker ID and Image: $dockerpath"
                docker push $dockerpath
    deploy-application:
      docker:
        - image: cimg/python:3.7-node
      parameters:
        workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - checkout
        - run:
            name: Install kubernetes
            command: |
                # Install awscli
                curl --silent "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip -qq awscliv2.zip && sudo ./aws/install
                # Install eksctl
                curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp && sudo mv /tmp/eksctl /usr/local/bin
                # Install and configure kubectl
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && kubectl version --client
                # Install and configure kubectl aws-iam-authenticator
                curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.6.3/aws-iam-authenticator_0.6.3_linux_amd64 && chmod +x ./aws-iam-authenticator && mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
                # Check cluster is existing
        - deploy:
            name: Deploy application to EKS cluster
            command: |
                cd kubernetes             
                eksctl create cluster -f create-cluster.yml || eksctl upgrade cluster -f create-cluster.yml --approve
                aws eks update-kubeconfig --region us-east-1 --name capstone-app
                
                kubernetes/create-or-update-resource:
                  get-rollout-status: true
                  resource-file-path: .circleci/files/deployment.yml
                  resource-name: deployment/capstone-app
                  show-kubectl-command: true
                kubectl get all
                kubectl get nodes

workflows:
  default:
    jobs:
      - check-dockerfile-format     
      - build-docker-image:
            requires: [check-dockerfile-format]
      - upload-docker:
            requires: [build-docker-image]
      - deploy-application:
            requires: [upload-docker]
